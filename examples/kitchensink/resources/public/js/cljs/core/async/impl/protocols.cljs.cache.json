["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs.core.async.impl.protocols","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$remove!",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","~:line",32,"~:column",4,"~:end-line",32,"~:end-column",11,"~:protocol","~$cljs.core.async.impl.protocols/Buffer","~:doc","remove and return next item from buffer, called under chan mutex","~:arglists",["~#list",["~$quote",["^G",[["~$b"]]]]]],"^C","^D","^5","~$cljs.core.async.impl.protocols/remove!","~:variadic",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",11,"~:method-params",["^G",[["~$b"]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^@",1,"^?",30,"^A",32,"~:max-fixed-arity",1,"~:fn-var",true,"^F",["^G",["^H",["^G",[["~$b"]]]]],"^E","remove and return next item from buffer, called under chan mutex"],"~$close-buf!",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",34,"^@",4,"^A",34,"^B",14,"^C","^D","^E","called on chan closed under chan mutex, return ignored","^F",["^G",["^H",["^G",[["~$b"]]]]]],"^C","^D","^5","~$cljs.core.async.impl.protocols/close-buf!","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",14,"^K",["^G",[["~$b"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",30,"^A",34,"^N",1,"^O",true,"^F",["^G",["^H",["^G",[["~$b"]]]]],"^E","called on chan closed under chan mutex, return ignored"],"~$close!",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",21,"^@",4,"^A",21,"^B",10,"^C","~$cljs.core.async.impl.protocols/Channel","^E",null,"^F",["^G",["^H",["^G",[["~$chan"]]]]]],"^C","^S","^5","~$cljs.core.async.impl.protocols/close!","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",10,"^K",["^G",[["^T"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",20,"^A",21,"^N",1,"^O",true,"^F",["^G",["^H",["^G",[["^T"]]]]],"^E",null],"~$Handler",["^ ","^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",24,"^@",14,"^A",24,"^B",21,"^E",null,"~:protocol-symbol",true,"~:jsdoc",["^G",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$active?",[["~$h"]],"~$blockable?",[["~$h"]],"~$commit",[["~$h"]]]]],"^W",true,"^5","~$cljs.core.async.impl.protocols/Handler","^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",21,"^@",1,"^?",24,"^Y",["^ ","^Z",["^ ","^[",[["~$h"]],"^10",[["~$h"]],"^11",[["~$h"]]]],"~:info",null,"^A",24,"~:impls",["^4",[]],"^E",null,"^X",["^G",["@interface"]]],"^10",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",26,"^@",4,"^A",26,"^B",14,"^C","^12","^E","returns true if this handler may be blocked, otherwise it must not block","^F",["^G",["^H",["^G",[["~$h"]]]]]],"^C","^12","^5","~$cljs.core.async.impl.protocols/blockable?","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",14,"^K",["^G",[["~$h"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",24,"^A",26,"^N",1,"^O",true,"^F",["^G",["^H",["^G",[["~$h"]]]]],"^E","returns true if this handler may be blocked, otherwise it must not block"],"^[",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",25,"^@",4,"^A",25,"^B",11,"^C","^12","^E","returns true if has callback. Must work w/o lock","^F",["^G",["^H",["^G",[["~$h"]]]]]],"^C","^12","^5","~$cljs.core.async.impl.protocols/active?","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",11,"^K",["^G",[["~$h"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",24,"^A",25,"^N",1,"^O",true,"^F",["^G",["^H",["^G",[["~$h"]]]]],"^E","returns true if has callback. Must work w/o lock"],"~$Buffer",["^ ","^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",30,"^@",14,"^A",30,"^B",20,"^E",null,"^W",true,"^X",["^G",["@interface"]],"^Y",["^ ","^Z",["^ ","~$full?",[["~$b"]],"^;",[["~$b"]],"~$add!*",[["~$b","~$itm"]],"^P",[["~$b"]]]]],"^W",true,"^5","^D","^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",20,"^@",1,"^?",30,"^Y",["^ ","^Z",["^ ","^18",[["~$b"]],"^;",[["~$b"]],"^19",[["~$b","^1:"]],"^P",[["~$b"]]]],"^13",null,"^A",30,"^14",["^4",[]],"^E",null,"^X",["^G",["@interface"]]],"^18",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",31,"^@",4,"^A",31,"^B",9,"^C","^D","^E","returns true if buffer can accept put","^F",["^G",["^H",["^G",[["~$b"]]]]]],"^C","^D","^5","~$cljs.core.async.impl.protocols/full?","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",9,"^K",["^G",[["~$b"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",30,"^A",31,"^N",1,"^O",true,"^F",["^G",["^H",["^G",[["~$b"]]]]],"^E","returns true if buffer can accept put"],"~$add!",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",36,"^@",7,"^A",36,"^B",11,"^F",["^G",["^H",["^G",[["~$b"],["~$b","^1:"]]]]],"~:top-fn",["^ ","^J",false,"^N",2,"^K",["^G",[["~$b"],["~$b","^1:"]]],"^F",["^G",[["~$b"],["~$b","^1:"]]],"^M",["^G",[null,null]]]],"^5","~$cljs.core.async.impl.protocols/add!","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",11,"^1=",["^ ","^J",false,"^N",2,"^K",["^G",[["~$b"],["~$b","^1:"]]],"^F",["^G",[["~$b"],["~$b","^1:"]]],"^M",["^G",[null,null]]],"^K",["^G",[["~$b"],["~$b","^1:"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",36,"^A",36,"^N",2,"^O",true,"^F",["^G",[["~$b"],["~$b","^1:"]]]],"^19",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",33,"^@",4,"^A",33,"^B",9,"^C","^D","^E","if room, add item to the buffer, returns b, called under chan mutex","^F",["^G",["^H",["^G",[["~$b","^1:"]]]]]],"^C","^D","^5","~$cljs.core.async.impl.protocols/add!*","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",9,"^K",["^G",[["~$b","^1:"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",30,"^A",33,"^N",2,"^O",true,"^F",["^G",["^H",["^G",[["~$b","^1:"]]]]],"^E","if room, add item to the buffer, returns b, called under chan mutex"],"~$ReadPort",["^ ","^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",13,"^@",14,"^A",13,"^B",22,"^E",null,"^W",true,"^X",["^G",["@interface"]],"^Y",["^ ","^Z",["^ ","~$take!",[["~$port","~$fn1-handler"]]]]],"^W",true,"^5","~$cljs.core.async.impl.protocols/ReadPort","^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",22,"^@",1,"^?",13,"^Y",["^ ","^Z",["^ ","^1A",[["^1B","^1C"]]]],"^13",null,"^A",13,"^14",["^4",[]],"^E",null,"^X",["^G",["@interface"]]],"~$Channel",["^ ","^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",20,"^@",14,"^A",20,"^B",21,"^E",null,"^W",true,"^X",["^G",["@interface"]],"^Y",["^ ","^Z",["^ ","^R",[["^T"]],"~$closed?",[["^T"]]]]],"^W",true,"^5","^S","^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",21,"^@",1,"^?",20,"^Y",["^ ","^Z",["^ ","^R",[["^T"]],"^1F",[["^T"]]]],"^13",null,"^A",20,"^14",["^4",[]],"^E",null,"^X",["^G",["@interface"]]],"^1F",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",22,"^@",4,"^A",22,"^B",11,"^C","^S","^E",null,"^F",["^G",["^H",["^G",[["^T"]]]]]],"^C","^S","^5","~$cljs.core.async.impl.protocols/closed?","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",11,"^K",["^G",[["^T"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",20,"^A",22,"^N",1,"^O",true,"^F",["^G",["^H",["^G",[["^T"]]]]],"^E",null],"~$UnblockingBuffer",["^ ","^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",43,"^@",14,"^A",43,"^B",30,"^E",null,"^W",true,"^X",["^G",["@interface"]],"^Y",["^ ","^Z",["^ "]]],"^W",true,"^5","~$cljs.core.async.impl.protocols/UnblockingBuffer","^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",30,"^@",1,"^?",43,"^Y",["^ ","^Z",["^ "]],"^13",null,"^A",43,"^14",["^4",[]],"^E",null,"^X",["^G",["@interface"]]],"~$MAX-QUEUE-SIZE",["^ ","^5","~$cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^?",11,"^@",1,"^A",11,"^B",28,"~:const",true,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",11,"^@",14,"^A",11,"^B",28,"^1L",true]],"^11",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",28,"^@",4,"^A",28,"^B",10,"^C","^12","^E","commit to fulfilling its end of the transfer, returns cb. Must be called within lock","^F",["^G",["^H",["^G",[["~$h"]]]]]],"^C","^12","^5","~$cljs.core.async.impl.protocols/commit","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",10,"^K",["^G",[["~$h"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",24,"^A",28,"^N",1,"^O",true,"^F",["^G",["^H",["^G",[["~$h"]]]]],"^E","commit to fulfilling its end of the transfer, returns cb. Must be called within lock"],"~$put!",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",17,"^@",4,"^A",17,"^B",8,"^C","~$cljs.core.async.impl.protocols/WritePort","^E","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val.","^F",["^G",["^H",["^G",[["^1B","~$val","^1C"]]]]]],"^C","^1O","^5","~$cljs.core.async.impl.protocols/put!","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",8,"^K",["^G",[["^1B","^1P","^1C"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",16,"^A",17,"^N",3,"^O",true,"^F",["^G",["^H",["^G",[["^1B","^1P","^1C"]]]]],"^E","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val."],"^1A",["^ ","^<",null,"^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",14,"^@",4,"^A",14,"^B",9,"^C","^1D","^E","derefable val if taken, nil if take was enqueued","^F",["^G",["^H",["^G",[["^1B","^1C"]]]]]],"^C","^1D","^5","~$cljs.core.async.impl.protocols/take!","^J",false,"^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",9,"^K",["^G",[["^1B","^1C"]]],"^L",null,"^M",["^G",[null,null]],"^@",1,"^?",13,"^A",14,"^N",2,"^O",true,"^F",["^G",["^H",["^G",[["^1B","^1C"]]]]],"^E","derefable val if taken, nil if take was enqueued"],"~$WritePort",["^ ","^=",["^ ","^>","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/cljs/core/async/impl/protocols.cljs","^?",16,"^@",14,"^A",16,"^B",23,"^E",null,"^W",true,"^X",["^G",["@interface"]],"^Y",["^ ","^Z",["^ ","^1N",[["^1B","^1P","^1C"]]]]],"^W",true,"^5","^1O","^>","resources/public/js/cljs/core/async/impl/protocols.cljs","^B",23,"^@",1,"^?",16,"^Y",["^ ","^Z",["^ ","^1N",[["^1B","^1P","^1C"]]]],"^13",null,"^A",16,"^14",["^4",[]],"^E",null,"^X",["^G",["@interface"]]]],"~:require-macros",null,"^E",null]
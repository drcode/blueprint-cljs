;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{ident?}, :name om.util, :imports nil, :requires nil, :uses nil, :defs {join-value {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 39, :column 7, :end-line 39, :end-column 17, :arglists (quote ([join]))}, :name om.util/join-value, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 17, :method-params ([join]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([join]))}, join-entry {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 28, :column 7, :end-line 28, :end-column 17, :arglists (quote ([expr]))}, :name om.util/join-entry, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 17, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, recursion? {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 47, :column 7, :end-line 47, :end-column 17, :arglists (quote ([x])), :tag boolean}, :name om.util/recursion?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :ret-tag boolean, :end-line 47, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, union? {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 8, :column 7, :end-line 8, :end-column 13, :arglists (quote ([expr])), :tag boolean}, :name om.util/union?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 13, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :ret-tag boolean, :end-line 8, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([expr]))}, mutation-key {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 60, :column 7, :end-line 60, :end-column 19, :arglists (quote ([expr]))}, :name om.util/mutation-key, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 19, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, unique-ident? {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 42, :column 7, :end-line 42, :end-column 20, :arglists (quote ([x])), :tag boolean}, :name om.util/unique-ident?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :ret-tag boolean, :end-line 42, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, mutation? {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 54, :column 7, :end-line 54, :end-column 16, :arglists (quote ([expr])), :tag boolean}, :name om.util/mutation?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 16, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :ret-tag boolean, :end-line 54, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([expr]))}, join-key {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 33, :column 7, :end-line 33, :end-column 15, :arglists (quote ([expr]))}, :name om.util/join-key, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 15, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, ident? {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 20, :column 7, :end-line 20, :end-column 13, :arglists (quote ([x])), :doc "Returns true if x is an ident.", :tag boolean}, :name om.util/ident?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :ret-tag boolean, :end-line 20, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is an ident."}, force-children {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 4, :column 7, :end-line 4, :end-column 21, :arglists (quote ([x]))}, :name om.util/force-children, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, join? {:protocol-inline nil, :meta {:file "/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/util.cljc", :line 15, :column 7, :end-line 15, :end-column 12, :arglists (quote ([x]))}, :name om.util/join?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{first :else _ expr ... symbol?}, :order [:else _ ... symbol? first expr]}, :doc nil}
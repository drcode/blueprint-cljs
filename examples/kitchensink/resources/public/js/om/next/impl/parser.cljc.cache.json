["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$om.next.impl.parser","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","^:","^:","~$util","~$om.util","^<","^<"],"~:uses",null,"~:defs",["^ ","~$expr->ast",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","~:line",115,"~:column",7,"~:end-line",115,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^H",[["~$x"]]]]],"~:doc","Given a query expression convert it into an AST."],"^5","~$om.next.impl.parser/expr->ast","~:variadic",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",16,"~:method-params",["^H",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^D",1,"^C",115,"^E",115,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["~$x"]]]]],"^J","Given a query expression convert it into an AST."],"~$call->ast",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",74,"^D",7,"^E",74,"^F",16,"^G",["^H",["^I",["^H",[[["~$f","~$args","~:as","~$call"]]]]]]],"^5","~$om.next.impl.parser/call->ast","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",16,"^M",["^H",[["~$p__23617"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",74,"^E",74,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[[["~$f","^S","^T","^U"]]]]]]],"~$ast->expr",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",135,"^D",7,"^E",135,"^F",16,"^G",["^H",["^I",["^H",[["~$ast"],[["^ ","~:keys",["~$type","~$component"],"^T","^Y"],"~$unparse?"]]]]],"^J","Given a query expression AST convert it back into a query expression.","~:top-fn",["^ ","^L",false,"^P",2,"^M",["^H",[["^Y"],[["^ ","^Z",["^[","^10"],"^T","^Y"],"^11"]]],"^G",["^H",[["^Y"],[["^ ","^Z",["^[","^10"],"^T","^Y"],"^11"]]],"^O",["^H",[null,null]]]],"^5","~$om.next.impl.parser/ast->expr","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",16,"^12",["^ ","^L",false,"^P",2,"^M",["^H",[["^Y"],[["^ ","^Z",["^[","^10"],"^T","^Y"],"^11"]]],"^G",["^H",[["^Y"],[["^ ","^Z",["^[","^10"],"^T","^Y"],"^11"]]],"^O",["^H",[null,null]]],"^M",["^H",[["^Y"],[["^ ","^Z",["^[","^10"],"^T","^Y"],"^11"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",135,"^E",135,"^P",2,"^Q",true,"^G",["^H",[["^Y"],[["^ ","^Z",["^[","^10"],"^T","^Y"],"^11"]]],"^J","Given a query expression AST convert it back into a query expression."],"~$rethrow?",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",237,"^D",7,"^E",237,"^F",15,"^G",["^H",["^I",["^H",[["~$x"]]]]]],"^5","~$om.next.impl.parser/rethrow?","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",15,"^M",["^H",[["~$x"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",237,"^E",237,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["~$x"]]]]]],"~$path-meta",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",167,"^D",7,"^E",167,"^F",16,"^G",["^H",["^I",["^H",[["~$data","~$path","~$query"],["^17","^18","^19","~$union-expr"]]]]],"^J","Add path metadata to a data structure. data is the data to be worked on.\n   path is the current path into the data. query is the query used to\n   walk the data. union-expr tracks the last seen union query to be used\n   when it finds a recursive union.","^12",["^ ","^L",false,"^P",4,"^M",["^H",[["^17","^18","^19"],["^17","^18","^19","^1:"]]],"^G",["^H",[["^17","^18","^19"],["^17","^18","^19","^1:"]]],"^O",["^H",[null,null]]]],"^5","~$om.next.impl.parser/path-meta","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",16,"^12",["^ ","^L",false,"^P",4,"^M",["^H",[["^17","^18","^19"],["^17","^18","^19","^1:"]]],"^G",["^H",[["^17","^18","^19"],["^17","^18","^19","^1:"]]],"^O",["^H",[null,null]]],"^M",["^H",[["^17","^18","^19"],["^17","^18","^19","^1:"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",167,"^E",167,"^P",4,"^Q",true,"^G",["^H",[["^17","^18","^19"],["^17","^18","^19","^1:"]]],"^J","Add path metadata to a data structure. data is the data to be worked on.\n   path is the current path into the data. query is the query used to\n   walk the data. union-expr tracks the last seen union query to be used\n   when it finds a recursive union."],"~$wrap-expr",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",128,"^D",7,"^E",128,"^F",16,"^G",["^H",["^I",["^H",[["~$root?","~$expr"]]]]]],"^5","~$om.next.impl.parser/wrap-expr","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",16,"^M",["^H",[["^1=","^1>"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",128,"^E",128,"^P",2,"^Q",true,"^G",["^H",["^I",["^H",[["^1=","^1>"]]]]]],"~$join->ast",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",91,"^D",7,"^E",91,"^F",16,"^G",["^H",["^I",["^H",[["~$join"]]]]]],"^5","~$om.next.impl.parser/join->ast","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",16,"^M",["^H",[["^1A"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",91,"^E",91,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["^1A"]]]]]],"~$keyword->ast",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",54,"^D",7,"^E",54,"^F",19,"^G",["^H",["^I",["^H",[["~$k"]]]]]],"^5","~$om.next.impl.parser/keyword->ast","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",19,"^M",["^H",[["~$k"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",54,"^E",54,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["~$k"]]]]]],"~$query->ast",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",81,"^D",7,"^E",81,"^F",17,"^G",["^H",["^I",["^H",[["^19"]]]]],"^J","Convert a query to its AST representation."],"^5","~$om.next.impl.parser/query->ast","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",17,"^M",["^H",[["^19"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",81,"^E",81,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["^19"]]]]],"^J","Convert a query to its AST representation."],"~$ident->ast",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",110,"^D",7,"^E",110,"^F",17,"^G",["^H",["^I",["^H",[[["~$k","~$id","^T","~$ref"]]]]]]],"^5","~$om.next.impl.parser/ident->ast","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",17,"^M",["^H",[["~$p__23632"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",110,"^E",110,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[[["~$k","^1H","^T","^1I"]]]]]]],"~$dispatch",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",299,"^D",7,"^E",299,"^F",15,"^G",["^H",["^I",["^H",[["~$_","~$k","~$_"]]]]]],"^5","~$om.next.impl.parser/dispatch","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",15,"^M",["^H",[["~$_","~$k","~$_"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",299,"^E",299,"^P",3,"^Q",true,"^G",["^H",["^I",["^H",[["~$_","~$k","~$_"]]]]]],"~$union-entry->ast",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",59,"^D",7,"^E",59,"^F",23,"^G",["^H",["^I",["^H",[[["~$k","~$v"]]]]]]],"^5","~$om.next.impl.parser/union-entry->ast","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",23,"^M",["^H",[["~$p__23610"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",59,"^E",59,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[[["~$k","~$v"]]]]]]],"~$parser",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",241,"^D",7,"^E",241,"^F",13,"^G",["^H",["^I",["^H",[[["^ ","^Z",["~$read","~$mutate"],"^T","~$config"]]]]]],"^J","Given a :read and/or :mutate function return a parser. Refer to om.next/parser\n   for top level documentation."],"^5","~$om.next.impl.parser/parser","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",13,"^M",["^H",[["~$p__23687"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",241,"^E",241,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[[["^ ","^Z",["^1R","^1S"],"^T","^1T"]]]]]],"^J","Given a :read and/or :mutate function return a parser. Refer to om.next/parser\n   for top level documentation."],"~$symbol->ast",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",50,"^D",7,"^E",50,"^F",18,"^G",["^H",["^I",["^H",[["~$k"]]]]]],"^5","~$om.next.impl.parser/symbol->ast","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",18,"^M",["^H",[["~$k"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",50,"^E",50,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["~$k"]]]]]],"~$union->ast",["^ ","^@",null,"^A",["^ ","^B","/Users/conradbarski/blueprint-cljs/examples/kitchensink/resources/public/js/om/next/impl/parser.cljc","^C",69,"^D",7,"^E",69,"^F",17,"^G",["^H",["^I",["^H",[["~$m"]]]]]],"^5","~$om.next.impl.parser/union->ast","^L",false,"^B","resources/public/js/om/next/impl/parser.cljc","^F",17,"^M",["^H",[["~$m"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",69,"^E",69,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["~$m"]]]]]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:query-root","~:path","~:remote","~:children","~:union-key","~:read","~:key","~:union-entry","~:else","~:call","~$*","~:value","~:params","~:ast","~:type","~:component","~:error/invalid-join","~:error/invalid-expression","~:om.next/abort","~:parser","~:root","~:result","~:prop","~:dispatch-key","~:om-path","~:action","~:target","^I","~:query","~:om.next/error","~:union","~$...","~:mutate","~:om.next/root","~:join","~:elide-paths"]],"~:order",["^2H","^28","^2?","^2G","^2@","^26","^2L","^25","^29","^2N","^I","^2K","^24","^2=","^2;","^2E","^22","^2R","^2O","^2:","^2A","^2B","^2I","~$*","^2C","^27","^2P","^2S","^2D","^2Q","^23","^2>","^2<","^2J","^2F","^2M"]],"^J","\n   Generic query expression parsing and AST manipulation.\n\n   QUERY EXPRESSIONS\n\n   Query expressions are a variation on Datomic Pull Syntax\n   http://docs.datomic.com/pull.html more suitable for generic client/server\n   state transfer. It's important to note the Om Next query expression syntax is\n   *not* a strict superset of Datomic Pull.\n\n   A query expression is composed of EDN values. The grammar for query\n   expressions follows:\n\n   QueryRoot      := EdnVector(QueryExpr*)\n   PlainQueryExpr := (EdnKeyword | IdentExpr | JoinExpr)\n   QueryExpr      := (PlainQueryExpr | ParamExpr)\n   IdentExpr      := EdnVector2(Keyword, EdnValue)\n   ParamExpr      := EdnList2(PlainQueryExpr | EdnSymbol, ParamMapExpr)\n   ParamMapExpr   := EdnMap(Keyword, EdnValue)\n   JoinExpr       := EdnMap((Keyword | IdentExpr), (QueryRoot | UnionExpr | RecurExpr))\n   UnionExpr      := EdnMap(Keyword, QueryRoot)\n   RecurExpr      := ('... | Integer)\n\n   Note most apis in Om Next expect a QueryRoot not a QueryExpr.\n\n   QUERY EXPRESSION AST FORMAT\n\n   Given a QueryExpr you can get the AST via om.next.impl.parser/expr->ast.\n   The following keys can appear in the AST representation:\n\n   {:type         (:prop | :join | :call | :root | :union | :union-entry)\n    :key          (EdnKeyword | EdnSymbol | IdentExpr)\n    :dispatch-key (EdnKeyword | EdnSymbol)\n    :union-key    EdnKeyword\n    :query        (QueryRoot | RecurExpr)\n    :params       ParamMapExpr\n    :children     EdnVector(AST)\n    :component    Object\n    :target       EdnKeyword}\n\n   :query and :params may or may not appear. :type :call is only for\n   mutations."]